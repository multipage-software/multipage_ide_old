/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
  UNICODE_INPUT = true;
  STATIC = false;
}
PARSER_BEGIN(ExpressionParser)
package com.maclan.expression;

public class ExpressionParser {

}
PARSER_END(ExpressionParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
	< LEFT_BRACKET : "(" >
| 	< RIGHT_BRACKET : ")" >
}

TOKEN :
{
	< NULL_LITERAL : "null" >
	
|	< BOOLEAN_LITERAL : "true" | "false" >

|	< INTEGER_LITERAL:
        <DECIMAL_LITERAL>
      | <HEX_LITERAL>
      | <OCTAL_LITERAL>
	>
|	< #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|	< #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|	< #OCTAL_LITERAL: "0" (["0"-"7"])* >

|	< FLOATING_POINT_LITERAL:
        <DECIMAL_FLOATING_POINT_LITERAL>
      | <HEXADECIMAL_FLOATING_POINT_LITERAL>
	>
|	< #DECIMAL_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)?
      | (["0"-"9"])+ <DECIMAL_EXPONENT>
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)?
	>
|	< #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|	< #HEXADECIMAL_FLOATING_POINT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT>
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT>
	>
|	< #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >

|	< STRING_LITERAL:
		< STRING_LITERAL1 >
	  | < STRING_LITERAL2 >
	>

|	< #STRING_LITERAL1:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
	>

|	< #STRING_LITERAL2:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","\"","'"]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
	>}

TOKEN :
{
    < PROCEDURE_PARAMETER : ":" >
|  	< BOOLEAN_AND : "and" >
|   < BOOLEAN_OR : "or" >
|	< BOOLEAN_XOR : "xor" >
| 	< BOOLEAN_NEGATION : "not" >
|	< NOT_EQUAL : "<>" >
| 	< EQUAL : "=" >
| 	< GREATER : ">" >
|	< GREATER_EQUAL : ">=" >
|	< LESS : "<" >
|	< LESS_EQUAL : "<=" >
|	< PLUS : "+" >
|	< MINUS : "-" >
|	< MULTIPLICATION : "*" >
|	< DIVISION : "/" >
|	< REMAINDER : "mod" >
|	< IS_OPRATOR : "is" >
|	< AS_OPERATOR : "as" >
|   < MEMBER_ACCESS: "." >
}

TOKEN :
{
	< TYPE_IDENTIFIER :
		  < BOOLEAN_TYPE >
		| < LONG_TYPE >
		| < DOUBLE_TYPE >
		| < STRING_TYPE >
	>
|	< #BOOLEAN_TYPE : "Boolean" >
|	< #LONG_TYPE : "Long" >
|	< #DOUBLE_TYPE : "Double" >
|	< #STRING_TYPE : "Text" >
}

TOKEN : /* Identifier */
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [
         "$",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
|
  < #PART_LETTER:
      [
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
}

TOKEN :
{
  < COMMA: "," >
}
