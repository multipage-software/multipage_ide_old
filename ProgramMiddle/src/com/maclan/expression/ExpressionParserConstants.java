/* Generated By:JavaCC: Do not edit this line. ExpressionParserConstants.java */
package com.maclan.expression;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
@SuppressWarnings("all")
public interface ExpressionParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LEFT_BRACKET = 5;
  /** RegularExpression Id. */
  int RIGHT_BRACKET = 6;
  /** RegularExpression Id. */
  int NULL_LITERAL = 7;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 8;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 9;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 10;
  /** RegularExpression Id. */
  int HEX_LITERAL = 11;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 12;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 13;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 14;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 15;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 16;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 17;
  /** RegularExpression Id. */
  int STRING_LITERAL = 18;
  /** RegularExpression Id. */
  int STRING_LITERAL1 = 19;
  /** RegularExpression Id. */
  int STRING_LITERAL2 = 20;
  /** RegularExpression Id. */
  int PROCEDURE_PARAMETER = 21;
  /** RegularExpression Id. */
  int BOOLEAN_AND = 22;
  /** RegularExpression Id. */
  int BOOLEAN_OR = 23;
  /** RegularExpression Id. */
  int BOOLEAN_XOR = 24;
  /** RegularExpression Id. */
  int BOOLEAN_NEGATION = 25;
  /** RegularExpression Id. */
  int NOT_EQUAL = 26;
  /** RegularExpression Id. */
  int EQUAL = 27;
  /** RegularExpression Id. */
  int GREATER = 28;
  /** RegularExpression Id. */
  int GREATER_EQUAL = 29;
  /** RegularExpression Id. */
  int LESS = 30;
  /** RegularExpression Id. */
  int LESS_EQUAL = 31;
  /** RegularExpression Id. */
  int PLUS = 32;
  /** RegularExpression Id. */
  int MINUS = 33;
  /** RegularExpression Id. */
  int MULTIPLICATION = 34;
  /** RegularExpression Id. */
  int DIVISION = 35;
  /** RegularExpression Id. */
  int REMAINDER = 36;
  /** RegularExpression Id. */
  int IS_OPRATOR = 37;
  /** RegularExpression Id. */
  int AS_OPERATOR = 38;
  /** RegularExpression Id. */
  int MEMBER_ACCESS = 39;
  /** RegularExpression Id. */
  int TYPE_IDENTIFIER = 40;
  /** RegularExpression Id. */
  int BOOLEAN_TYPE = 41;
  /** RegularExpression Id. */
  int LONG_TYPE = 42;
  /** RegularExpression Id. */
  int DOUBLE_TYPE = 43;
  /** RegularExpression Id. */
  int STRING_TYPE = 44;
  /** RegularExpression Id. */
  int IDENTIFIER = 45;
  /** RegularExpression Id. */
  int LETTER = 46;
  /** RegularExpression Id. */
  int PART_LETTER = 47;
  /** RegularExpression Id. */
  int COMMA = 48;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"(\"",
    "\")\"",
    "\"null\"",
    "<BOOLEAN_LITERAL>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<STRING_LITERAL>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "\":\"",
    "\"and\"",
    "\"or\"",
    "\"xor\"",
    "\"not\"",
    "\"<>\"",
    "\"=\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"mod\"",
    "\"is\"",
    "\"as\"",
    "\".\"",
    "<TYPE_IDENTIFIER>",
    "\"Boolean\"",
    "\"Long\"",
    "\"Double\"",
    "\"Text\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\",\"",
  };

}
